Subset sum problem is to find subset of elements that are selected from a given set whose sum adds up to a given number K.
We are considering the set contains non-negative values. It is assumed that the input set is unique (no duplicates are presented).
Backtracking Algorithm for Subset Sum
Using exhaustive search we consider all subsets irrespective of whether they satisfy given constraints or not. Backtracking can be used to make a systematic
consideration of the elements to be selected.

The tree should trigger a clue to implement the backtracking algorithm (try yourself). It prints all those subsets whose sum add up to given number.
We need to explore the nodes along the breadth and depth of the tree. Generating nodes along breadth is controlled by loop and nodes along the depth
are generated using recursion (post order traversal). Pseudo code given below,
if(subset is satisfying the constraint)
    print the subset
    exclude the current element and consider next element
else
    generate the nodes of present level along breadth of tree and
    recur for next levels

The power of backtracking appears when we combine explicit and implicit constraints, and we stop generating nodes when these checks fail. We can improve 
the above algorithm by strengthening the constraint checks and presorting the data. By sorting the initial array, we need not to consider rest of the array, 
once the sum so far is greater than target number. We can backtrack and check other possibilities.

Similarly, assume the array is presorted and we found one subset. We can generate next node excluding the present node only when inclusion of next node 
satisfies the constraints. Given below is optimized implementation (it prunes the subtree if it is not satisfying contraints).

#include <stdio.h> 
#include <stdlib.h>   
#define ARRAYSIZE(a) (sizeof(a))/(sizeof(a[0])) 
static int total_nodes; 
  
// prints subset found 
void printSubset(int A[], int size) 
{ 
    for(int i = 0; i < size; i++) 
    { 
        printf("%*d", 5, A[i]); 
    } 
    printf("n"); 
} 
// qsort compare function 
int comparator(const void *pLhs, const void *pRhs) 
{ 
    int *lhs = (int *)pLhs; 
    int *rhs = (int *)pRhs; 
    return *lhs > *rhs; 
} 
// inputs 
// s            - set vector 
// t            - tuplet vector 
// s_size       - set size 
// t_size       - tuplet size so far 
// sum          - sum so far 
// ite          - nodes count 
// target_sum   - sum to be found 
void subset_sum(int s[], int t[], int s_size, int t_size, int sum, int ite, int const target_sum) 
{ 
    total_nodes++; 
    if( target_sum == sum ) 
    { 
        // We found sum 
        printSubset(t, t_size); 
        // constraint check 
        if( ite + 1 < s_size && sum - s[ite] + s[ite+1] <= target_sum ) 
        { 
            // Exclude previous added item and consider next candidate 
            subset_sum(s, t, s_size, t_size-1, sum - s[ite], ite + 1, target_sum); 
        } 
        return; 
    } 
    else
    { 
        // constraint check 
        if( ite < s_size && sum + s[ite] <= target_sum ) 
        { 
            // generate nodes along the breadth 
            for( int i = ite; i < s_size; i++ ) 
            { 
                t[t_size] = s[i]; 
  
                if( sum + s[i] <= target_sum ) 
                { 
                    // consider next level node (along depth) 
                    subset_sum(s, t, s_size, t_size + 1, sum + s[i], i + 1, target_sum); 
                } 
            } 
        } 
    } 
} 
  
// Wrapper that prints subsets that sum to target_sum 
void generateSubsets(int s[], int size, int target_sum) 
{ 
    int *tuplet_vector = (int *)malloc(size * sizeof(int)); 
    int total = 0; 
    // sort the set 
    qsort(s, size, sizeof(int), &comparator); 
    for( int i = 0; i < size; i++ ) 
        total += s[i]; 
    if( s[0] <= target_sum && total >= target_sum ) 
        subset_sum(s, tuplet_vector, size, 0, 0, 0, target_sum);   
    free(tuplet_vector); 
} 
  
int main() 
{ 
    int weights[] = {15, 22, 14, 26, 32, 9, 16, 8}; 
    int target = 53; 
    int size = ARRAYSIZE(weights); 
    generateSubsets(weights, size, target); 
    printf("Nodes generated %d\n", total_nodes); 
    return 0; 
} 
